<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Err_AbstractFunctionIsNonAbstractClass" xml:space="preserve">
    <value>The abstract function "{0}" was declared in the non abstract class "{1}". Only abstract clases may have abstract functions.</value>
    <comment>0: Function Name // 1: Class Name</comment>
  </data>
  <data name="Err_BaseNotInClass" xml:space="preserve">
    <value>A base call is outside of a class.</value>
  </data>
  <data name="Err_BaseWithoutBaseClass" xml:space="preserve">
    <value>The base call in class "{0}" is not allowed since the given class has no base class.</value>
    <comment>0: Class Name</comment>
  </data>
  <data name="Err_BytecodeIdAlreadyUsed" xml:space="preserve">
    <value>The bytecode id {0} requested by type "{1}" is already used by type "{2}".</value>
    <comment>0: Bytecode ID // 1: Requested Type // 2: Occupying Type</comment>
  </data>
  <data name="Err_CannotIndexBaseDynamically" xml:space="preserve">
    <value>A base call must use a constant expression.</value>
  </data>
  <data name="Err_CannotIndexBaseWithType" xml:space="preserve">
    <value>Cannot index base with a value of type "{0}".</value>
    <comment>0: Value Type</comment>
  </data>
  <data name="Err_CannotIndexType" xml:space="preserve">
    <value>A value of type "{0}" cannot be indexed.</value>
    <comment>0: Type Name</comment>
  </data>
  <data name="Err_ClassDoesNotImplementAllAbstracts" xml:space="preserve">
    <value>The class "{0}" does not implement all abstract functions: {1}</value>
    <comment>0: Class Name // 1: Not Implemeneted Functions</comment>
  </data>
  <data name="Err_ClassFieldConflictsWithFunction" xml:space="preserve">
    <value>The function "{1}" in class "{0}" conflicts with the field "{2}".</value>
    <comment>0: Class Name // 1: Function // 2: Field</comment>
  </data>
  <data name="Err_ClassFieldIsInvalid" xml:space="preserve">
    <value>The field "{1}" in class "{0}" is invalid.</value>
    <comment>0: Class Name // 1: Field</comment>
  </data>
  <data name="Err_ClassFieldMissing" xml:space="preserve">
    <value>The class "{0}" does not have a field with the name "{1}".</value>
    <comment>0: Class Name // 2: Field Name</comment>
  </data>
  <data name="Err_ClassFieldNotVisibleToClass" xml:space="preserve">
    <value>The field "{1}" in class "{1}" is not visible to class "{2}".</value>
    <comment>0: Class Name // 1: Field // 2: Other Class</comment>
  </data>
  <data name="Err_ClassFieldNotVisibleToGlobal" xml:space="preserve">
    <value>The field "{1}" in class "{1}" is not visible to global context.</value>
    <comment>0: Class Name // 1: Field</comment>
  </data>
  <data name="Err_ClassFunctionDoesNotOverride" xml:space="preserve">
    <value>The function "{1}" in class "{0}" hides the function "{2}" but does not have the override member modifier.</value>
    <comment>0: Class Name // 1: Function // 2: Hidden Function</comment>
  </data>
  <data name="Err_ClassFunctionIsInvalid" xml:space="preserve">
    <value>The function "{1}" in class "{0}" is invalid.</value>
    <comment>0: Class Name // 1: Function</comment>
  </data>
  <data name="Err_ClassFunctionOverridesNothing" xml:space="preserve">
    <value>The function "{1}" in class "{0}" has an override member modifier but does not have a function to override.</value>
    <comment>0: Class Name // 1: Function</comment>
  </data>
  <data name="Err_ClassFunctionOverridesOtherAccess" xml:space="preserve">
    <value>The function "{1}"({2}-access) in class "{0}" overrides the function "{3}"({4}-access). The functions have a different access modifier.</value>
    <comment>0: Class Name // 1: Function // 2: Function Access // 3: Overridden Function // 4: Overridden Function Access</comment>
  </data>
  <data name="Err_ConflictingClassField" xml:space="preserve">
    <value>The field "{1}" in class "{0}" conflicts with field "{2}".</value>
    <comment>0: Class Name // 1: Field // 2: Conflict Field</comment>
  </data>
  <data name="Err_DuplicateChunkVariable" xml:space="preserve">
    <value>The variable "{0}" exists multiple times within its chunk hierarchy.</value>
    <comment>0: Variable Name</comment>
  </data>
  <data name="Err_DynMapClassIsAlreadyMapped" xml:space="preserve">
    <value>Cannot create dynmaic mapping for the SoLScript class "{0}" since it is already mapped to the native class "{1}".</value>
    <comment>0: Sol Class Name, 1: Mapped Native Class</comment>
  </data>
  <data name="Err_DynMapCompilerError" xml:space="preserve">
    <value>The following error occured while building the dynamic mapping for {0} SolScript classes:\n{1}</value>
    <comment>0: Error Count, 1: Error Text</comment>
  </data>
  <data name="Err_DynMapException" xml:space="preserve">
    <value>An exception occured while calling the SolScript function "{0}" from a dynamically created native wrapper. See inner exception for details.</value>
    <comment>0: Sol Function Name</comment>
  </data>
  <data name="Err_DynMapFailedToWriteSourceFile" xml:space="preserve">
    <value>Cannot create source reference file for the native mappings.</value>
  </data>
  <data name="Err_DynMapFunctionTriedToOverrideSelf" xml:space="preserve">
    <value>The SolScript function "{0}" tried to override itself. This is a bug in SolScript.</value>
    <comment>0: Sol Function Name</comment>
  </data>
  <data name="Err_DynMapNoNativeDescriptor" xml:space="preserve">
    <value>Cannot create a native mapping for SolScript class "{0}" since it does not override a natice class.</value>
    <comment>0: Sol Class Name</comment>
  </data>
  <data name="Err_FailedToValidateClass" xml:space="preserve">
    <value>Failed to validate the class "{0}".</value>
    <comment>0: Class Name</comment>
  </data>
  <data name="Err_FailedToValidateField" xml:space="preserve">
    <value>Failed to validate the field "{0}".</value>
    <comment>0: Field Name</comment>
  </data>
  <data name="Err_FailedToValidateFunction" xml:space="preserve">
    <value>Failed to validate the function "{0}".</value>
    <comment>0: Function Name</comment>
  </data>
  <data name="Err_FunctionAccessProhibitsModifier" xml:space="preserve">
    <value>The access modifier "{1}" of function "{0}" prohibits the used member modifier "{2}".</value>
    <comment>0: Function Name // 1: Access Modifier // 2: Invalid Member Modifier</comment>
  </data>
  <data name="Err_GlobalFieldConflictsWithFunction" xml:space="preserve">
    <value>The global-defined function "{0}" conflicts with the field "{1}".</value>
    <comment>0: Function // 1: Field</comment>
  </data>
  <data name="Err_GlobalFunctionMayNotHaveModifier" xml:space="preserve">
    <value>The global-defined function "{0}" has the member modifier "{1}". Global functions may not have member modifiers.</value>
    <comment>0: Function Name // 1: Invalid Member Modifier</comment>
  </data>
  <data name="Err_InvalidCompilerState" xml:space="preserve">
    <value>This operation may not be performed in the current state({0}). Required state is {1}.</value>
    <comment>0: Current State // 1: Required State</comment>
  </data>
  <data name="Err_TableConstructorKeyError" xml:space="preserve">
    <value>Key {0} in a table constructor is invalid.</value>
    <comment>0: Element Index</comment>
  </data>
  <data name="Err_TableConstructorValueError" xml:space="preserve">
    <value>Value {0} in a table constructor is invalid.</value>
    <comment>0: Element Index</comment>
  </data>
  <data name="Err_TypeAlreadyAssingedToBytecodeId" xml:space="preserve">
    <value>The type "{0}" is already assigned to bytecode ID {1}, but was requested to be assigned to ID {2}.</value>
    <comment>0: Type // 1: Requested Bytecode ID // 2: Occupying Bytecode ID</comment>
  </data>
  <data name="Err_VariableDeclarationNotInChunk" xml:space="preserve">
    <value>The variable declaration of "{0}" is not in a chunk.</value>
    <comment>0: Variable Name</comment>
  </data>
  <data name="Err_VariableInitializerTypeDoesNotMatchDeclaredType" xml:space="preserve">
    <value>The variable "{0}" is declared with a type of "{1}", however the initializer returns a value of type "{2}".The types are not compatible.</value>
    <comment>0: Variable Name // 1: Declared Type // 2: Init Type</comment>
  </data>
</root>